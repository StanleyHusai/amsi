# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nlosExclusion/GNSS_Raw.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GNSS_Raw(genpy.Message):
  _md5sum = "ef4d282f16a01f8be354e8df6c4162e0"
  _type = "nlosExclusion/GNSS_Raw"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 GNSS_time
float64 total_sv
float64 prn_satellites_index
float64 pseudorange
float64 snr
float64 elevation
float64 azimuth
float64 err_tropo
float64 err_iono
float64 sat_clk_err
float64 sat_pos_x
float64 sat_pos_y
float64 sat_pos_z
#float64 GNSSCovariance
int64 visable #0-Not sure 1-visable 2-invisable
string  sat_system
"""
  __slots__ = ['GNSS_time','total_sv','prn_satellites_index','pseudorange','snr','elevation','azimuth','err_tropo','err_iono','sat_clk_err','sat_pos_x','sat_pos_y','sat_pos_z','visable','sat_system']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       GNSS_time,total_sv,prn_satellites_index,pseudorange,snr,elevation,azimuth,err_tropo,err_iono,sat_clk_err,sat_pos_x,sat_pos_y,sat_pos_z,visable,sat_system

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GNSS_Raw, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.GNSS_time is None:
        self.GNSS_time = 0.
      if self.total_sv is None:
        self.total_sv = 0.
      if self.prn_satellites_index is None:
        self.prn_satellites_index = 0.
      if self.pseudorange is None:
        self.pseudorange = 0.
      if self.snr is None:
        self.snr = 0.
      if self.elevation is None:
        self.elevation = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.err_tropo is None:
        self.err_tropo = 0.
      if self.err_iono is None:
        self.err_iono = 0.
      if self.sat_clk_err is None:
        self.sat_clk_err = 0.
      if self.sat_pos_x is None:
        self.sat_pos_x = 0.
      if self.sat_pos_y is None:
        self.sat_pos_y = 0.
      if self.sat_pos_z is None:
        self.sat_pos_z = 0.
      if self.visable is None:
        self.visable = 0
      if self.sat_system is None:
        self.sat_system = ''
    else:
      self.GNSS_time = 0.
      self.total_sv = 0.
      self.prn_satellites_index = 0.
      self.pseudorange = 0.
      self.snr = 0.
      self.elevation = 0.
      self.azimuth = 0.
      self.err_tropo = 0.
      self.err_iono = 0.
      self.sat_clk_err = 0.
      self.sat_pos_x = 0.
      self.sat_pos_y = 0.
      self.sat_pos_z = 0.
      self.visable = 0
      self.sat_system = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_13dq.pack(_x.GNSS_time, _x.total_sv, _x.prn_satellites_index, _x.pseudorange, _x.snr, _x.elevation, _x.azimuth, _x.err_tropo, _x.err_iono, _x.sat_clk_err, _x.sat_pos_x, _x.sat_pos_y, _x.sat_pos_z, _x.visable))
      _x = self.sat_system
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.GNSS_time, _x.total_sv, _x.prn_satellites_index, _x.pseudorange, _x.snr, _x.elevation, _x.azimuth, _x.err_tropo, _x.err_iono, _x.sat_clk_err, _x.sat_pos_x, _x.sat_pos_y, _x.sat_pos_z, _x.visable,) = _struct_13dq.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sat_system = str[start:end].decode('utf-8')
      else:
        self.sat_system = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_13dq.pack(_x.GNSS_time, _x.total_sv, _x.prn_satellites_index, _x.pseudorange, _x.snr, _x.elevation, _x.azimuth, _x.err_tropo, _x.err_iono, _x.sat_clk_err, _x.sat_pos_x, _x.sat_pos_y, _x.sat_pos_z, _x.visable))
      _x = self.sat_system
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.GNSS_time, _x.total_sv, _x.prn_satellites_index, _x.pseudorange, _x.snr, _x.elevation, _x.azimuth, _x.err_tropo, _x.err_iono, _x.sat_clk_err, _x.sat_pos_x, _x.sat_pos_y, _x.sat_pos_z, _x.visable,) = _struct_13dq.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sat_system = str[start:end].decode('utf-8')
      else:
        self.sat_system = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_13dq = struct.Struct("<13dq")
