# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nlosExclusion/Satellite_Info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Satellite_Info(genpy.Message):
  _md5sum = "20a81c003be71b4e6d03512fc572c1b0"
  _type = "nlosExclusion/Satellite_Info"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 GNSS_time # Time for this epoch
float64 total_sv  # Total satellites numbers
float64 GPSNum    # GPS satellites numbers 
float64 BeidouNum # Beidou satellites numbers
float64 GPSExcluded # excluded GPS satellites numbers
float64 BeidouExcluded # excluded Beidou satellites numbers """
  __slots__ = ['GNSS_time','total_sv','GPSNum','BeidouNum','GPSExcluded','BeidouExcluded']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       GNSS_time,total_sv,GPSNum,BeidouNum,GPSExcluded,BeidouExcluded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Satellite_Info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.GNSS_time is None:
        self.GNSS_time = 0.
      if self.total_sv is None:
        self.total_sv = 0.
      if self.GPSNum is None:
        self.GPSNum = 0.
      if self.BeidouNum is None:
        self.BeidouNum = 0.
      if self.GPSExcluded is None:
        self.GPSExcluded = 0.
      if self.BeidouExcluded is None:
        self.BeidouExcluded = 0.
    else:
      self.GNSS_time = 0.
      self.total_sv = 0.
      self.GPSNum = 0.
      self.BeidouNum = 0.
      self.GPSExcluded = 0.
      self.BeidouExcluded = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.GNSS_time, _x.total_sv, _x.GPSNum, _x.BeidouNum, _x.GPSExcluded, _x.BeidouExcluded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.GNSS_time, _x.total_sv, _x.GPSNum, _x.BeidouNum, _x.GPSExcluded, _x.BeidouExcluded,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.GNSS_time, _x.total_sv, _x.GPSNum, _x.BeidouNum, _x.GPSExcluded, _x.BeidouExcluded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.GNSS_time, _x.total_sv, _x.GPSNum, _x.BeidouNum, _x.GPSExcluded, _x.BeidouExcluded,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
