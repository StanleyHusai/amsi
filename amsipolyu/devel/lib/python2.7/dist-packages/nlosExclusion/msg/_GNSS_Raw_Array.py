# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nlosExclusion/GNSS_Raw_Array.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nlosExclusion.msg
import std_msgs.msg

class GNSS_Raw_Array(genpy.Message):
  _md5sum = "8eb26aafb0dddf7c59548e059be439ec"
  _type = "nlosExclusion/GNSS_Raw_Array"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
nlosExclusion/GNSS_Raw[] GNSS_Raws

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: nlosExclusion/GNSS_Raw
float64 GNSS_time
float64 total_sv
float64 prn_satellites_index
float64 pseudorange
float64 snr
float64 elevation
float64 azimuth
float64 err_tropo
float64 err_iono
float64 sat_clk_err
float64 sat_pos_x
float64 sat_pos_y
float64 sat_pos_z
#float64 GNSSCovariance
int64 visable #0-Not sure 1-visable 2-invisable
string  sat_system
"""
  __slots__ = ['header','GNSS_Raws']
  _slot_types = ['std_msgs/Header','nlosExclusion/GNSS_Raw[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,GNSS_Raws

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GNSS_Raw_Array, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GNSS_Raws is None:
        self.GNSS_Raws = []
    else:
      self.header = std_msgs.msg.Header()
      self.GNSS_Raws = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.GNSS_Raws)
      buff.write(_struct_I.pack(length))
      for val1 in self.GNSS_Raws:
        _x = val1
        buff.write(_struct_13dq.pack(_x.GNSS_time, _x.total_sv, _x.prn_satellites_index, _x.pseudorange, _x.snr, _x.elevation, _x.azimuth, _x.err_tropo, _x.err_iono, _x.sat_clk_err, _x.sat_pos_x, _x.sat_pos_y, _x.sat_pos_z, _x.visable))
        _x = val1.sat_system
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GNSS_Raws is None:
        self.GNSS_Raws = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.GNSS_Raws = []
      for i in range(0, length):
        val1 = nlosExclusion.msg.GNSS_Raw()
        _x = val1
        start = end
        end += 112
        (_x.GNSS_time, _x.total_sv, _x.prn_satellites_index, _x.pseudorange, _x.snr, _x.elevation, _x.azimuth, _x.err_tropo, _x.err_iono, _x.sat_clk_err, _x.sat_pos_x, _x.sat_pos_y, _x.sat_pos_z, _x.visable,) = _struct_13dq.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sat_system = str[start:end].decode('utf-8')
        else:
          val1.sat_system = str[start:end]
        self.GNSS_Raws.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.GNSS_Raws)
      buff.write(_struct_I.pack(length))
      for val1 in self.GNSS_Raws:
        _x = val1
        buff.write(_struct_13dq.pack(_x.GNSS_time, _x.total_sv, _x.prn_satellites_index, _x.pseudorange, _x.snr, _x.elevation, _x.azimuth, _x.err_tropo, _x.err_iono, _x.sat_clk_err, _x.sat_pos_x, _x.sat_pos_y, _x.sat_pos_z, _x.visable))
        _x = val1.sat_system
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GNSS_Raws is None:
        self.GNSS_Raws = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.GNSS_Raws = []
      for i in range(0, length):
        val1 = nlosExclusion.msg.GNSS_Raw()
        _x = val1
        start = end
        end += 112
        (_x.GNSS_time, _x.total_sv, _x.prn_satellites_index, _x.pseudorange, _x.snr, _x.elevation, _x.azimuth, _x.err_tropo, _x.err_iono, _x.sat_clk_err, _x.sat_pos_x, _x.sat_pos_y, _x.sat_pos_z, _x.visable,) = _struct_13dq.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sat_system = str[start:end].decode('utf-8')
        else:
          val1.sat_system = str[start:end]
        self.GNSS_Raws.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_13dq = struct.Struct("<13dq")
_struct_3I = struct.Struct("<3I")
